{
  "compilerOptions": {
    "baseUrl" : ".",
    "paths": {
      "components/*": ["src/components/*"],
      "containers/*": ["src/containers/*"],
      "scss/*": ["src/scss/*"],
      "src/*": ["src/*"]
    },
    /* トランスパイル後のECMAScriptのバージョン */
    "target": "esnext",

    /* 相対パスではないモジュールは node_modules 配下を検索する */
    "moduleResolution": "node",
    "skipLibCheck":true, //型定義ファイルの型チェックをスキップする。
    "allowSyntheticDefaultImports": true, //デフォルトのエクスポートがないモジュールからのデフォルトエクスポートを許可する。
    "forceConsistentCasingInFileNames": true, //大文字小文字を区別して参照を解決するようにする。windowsは大小を区別しないが他のOSだと区別するので、意図しないエラーを出さないため。

    /* 今回、トランスパイルは Babelが行うので、`tsc`コマンドでJavaScriptファイルを出力しないようにする */
    "noEmit": true,

    /* 厳格な型チェックオプション（noImplicitAny、noImplicitThis、alwaysStrict、
       strictBindCallApply、strictNullChecks、strictFunctionTypes、
       strictPropertyInitialization）を有効化する */
    "strict": true,
    "allowJs": true,

    /* 各ファイルを個々のモジュールとしてトランスパイルする。
       Babel では技術的制約で、ネームスペースなどのファイルを跨いだ構文を解釈してトランスパイルできない。
       このオプションを有効にすれば、Babel でトランスパイルできない TypeScriptの構文を検出して警告を出す */
    "isolatedModules": true,

    /* ES modules 形式以外の、CommonJS 形式などのモジュールを default import 形式で読み込める
       例）const module = require('module') -> import module from 'module' */
    "esModuleInterop": true,
    "jsx": "preserve"
  },
  "include": ["src/**/*"]
}
